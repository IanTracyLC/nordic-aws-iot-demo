# Serverless AWS IoT Demo Template

service:
  name: aws-iot-demo

frameworkVersion: ">=1.0.0 <2.0.0"

plugins:
  - serverless-stack-output
  - serverless-dynamodb-local
  - serverless-offline-scheduler
  - serverless-webpack
  - serverless-spa
  - serverless-offline

custom:
  stage: ${{opt:stage, self:provider.stage}}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  spa:
    appFolder: "www"
    gzip: true
    webpack: "webpack.spa.config.js"
    bucket: ${{self:custom.context}}-${{self:custom.stage}}-serverless-site-s3
  output:
    file: .serverless/stack.json
  context: nordic
  ownApiKey: ${{file(config.${{self:custom.stage}}.yml):OWN_API_KEY}}
  dynamoMetricsTableKey: thing
  thingName: ${{self:custom.context}}_thingy_52
  federationName: ${{self:custom.context}}_federation
  iotPublicTopic: publicData
  dynamoWeatherTableName: ${{self:custom.context}}_own-weather
  dynamoMetricsTableName: ${{self:custom.context}}_metrics

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 256
  timeout: 10
  versionFunctions: true
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  environment:
    COGNITO_POOL:
      Ref: CognitoPool
    THING_NAME: ${{self:custom.thingName}}
    OWN_API_KEY: ${{self:custom.ownApiKey}}
    DYNAMO_DB_WEATHER_TABLE_NAME: ${{self:custom.dynamoWeatherTableName}}
    DYNAMO_DB_METRICS_TABLE_NAME: ${{self:custom.dynamoMetricsTableName}}
    DYNAMO_DB_METRICS_TABLE_KEY: ${{self:custom.dynamoMetricsTableKey}}
  stackTags:
    CONTEXT: ${{self:custom.context}}

package:
  exclude:
    - .idea/**
    - .git/**
    - .spa/**
    - simulator/**
    - .travis.yml
  excludeDevDependencies: true

functions:
  getHistory:
    role: APILambdaExecutionRole
    handler: lambdas/getHistory.handler
    timeout: 30
    events:
      - http:
          method: get
          integration: lambda
          path: getHistory
          cors: true
          request:
            passThrough: WHEN_NO_MATCH
            parameters:
              querystrings:
                since: true
            template:
              application/json: '{ "since" : $input.params("since") }'
            response:
             statusCodes:
                 200:
                   pattern: ""
                   headers:
                     Content-Type: "'application/json'"

  iotPresignedUrl:
    role: APILambdaExecutionRole
    handler: lambdas/iotPresignedUrl.handler
    timeout: 30
    events:
      - http:
          path: iotPresignedUrl
          method: get
          cors: true

  fetchWeather:
    role: APILambdaExecutionRole
    handler: lambdas/fetchWeather.handler
    events:
      - schedule:
          rate: cron(0/15 * * * ? *)
          enabled: true

resources:
  Resources:
    MetricsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${{self:custom.dynamoMetricsTableName}}
        AttributeDefinitions:
          - AttributeName: ${{self:custom.dynamoMetricsTableKey}}
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: "N"
        KeySchema:
          - AttributeName: ${{self:custom.dynamoMetricsTableKey}}
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    WeatherDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${{self:custom.dynamoWeatherTableName}}
        AttributeDefinitions:
          - AttributeName: city
            AttributeType: "N"
          - AttributeName: timestamp
            AttributeType: "N"
        KeySchema:
          - AttributeName: city
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    APILambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${{self:custom.context}}_AdminDynamo
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "*"
                  Resource:
                    Fn::GetAtt: [ WeatherDynamoDBTable, Arn ]
                - Effect: Allow
                  Action: "*"
                  Resource:
                    Fn::GetAtt: [ MetricsDynamoDBTable, Arn ]
          - PolicyName: ${{self:custom.context}}_CognitoIdentify
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "cognito-identity:*"
                  Resource: "*"
          - PolicyName: ${{self:custom.context}}_CloudWatchLogStreams
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "logs:*"
                  Resource: "*"
    IotThing:
      Type: "AWS::IoT::Thing"
      Properties:
        ThingName: ${{self:custom.thingName}}
    IotSimulatorThing:
      Type: "AWS::IoT::Thing"
      Properties:
        ThingName: ${{self:custom.thingName}}_simulator
    BleRouterPolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: "iot:*"
              Effect: Allow
              Resource: "*"
    StoreMetricsIotRule:
      Type: "AWS::IoT::TopicRule"
      Properties:
        RuleName: ${{self:custom.context}}_StoreMetrics
        TopicRulePayload:
          RuleDisabled: "false"
          AwsIotSqlVersion: "2016-03-23"
          Sql:
            Fn::Join:
              - ""
              - - "SELECT "
                - "topic(3) AS thingName,"
                - "state.reported.temperature,"
                - "state.reported.humidity,"
                - "state.reported.pressure,"
                - "timestamp "
                - "FROM '$aws/things/+/shadow/update/accepted' "
                - "WHERE startswith(topic(3),'${{self:custom.context}}') = true"
          Actions:
            - DynamoDB:
                RoleArn:
                  Fn::GetAtt: [ IotDynamoPutRole, Arn ]
                TableName: ${{self:custom.dynamoMetricsTableName}}
                HashKeyField: ${{self:custom.dynamoMetricsTableKey}}
                HashKeyType: STRING
                HashKeyValue: "${topic(3)}"
                RangeKeyField: timestamp
                RangeKeyType: NUMBER
                RangeKeyValue: "${metadata.reported.temperature.timestamp}"
                PayloadField: payload
            - Republish:
                RoleArn:
                  Fn::GetAtt: [ IotRepublishRole, Arn ]
                Topic: ${{self:custom.iotPublicTopic}}
    IotDynamoPutRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - iot.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: ${{self:custom.context}}_IotPutMetricsTable
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "dynamodb:PutItem"
                  Resource:
                    Fn::GetAtt: [ MetricsDynamoDBTable, Arn ]
    IotRepublishRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - iot.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: ${{self:custom.context}}_IotRepublishToPublicTopic
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "iot:Publish"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:iot:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":topic/"
                        - ${{self:custom.iotPublicTopic}}
    CognitoPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${{self:custom.federationName}}
        AllowUnauthenticatedIdentities: true
    CognitoPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: CognitoPool
        Roles:
          unauthenticated:
            Fn::GetAtt: [ CognitoUnAuthorizedRole, Arn ]
          authenticated:
            Fn::GetAtt: [ CognitoAuthorizedRole, Arn ]
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated
        Policies:
          - PolicyName: CognitoIotUnAuthRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource:
                    - "*"
                -
                  Effect: Allow
                  Action: "iot:*"
                  Resource: "*"
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: CognitoIotAuthRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource:
                    - "*"
                -
                  Effect: Allow
                  Action: "iot:*"
                  Resource: "*"
  Outputs:
    CognitoPoolId:
      Value:
        Ref: CognitoPool
    IotEndpoint:
      Value:
        Fn::Join:
          - ""
          - - data.iot.
            - Ref: "AWS::Region"
            - .amazonaws.com
    MqttTopic:
      Value: ${{self:custom.iotPublicTopic}}
    BleRouterPolicyArn:
      Value:
        Fn::GetAtt: [ BleRouterPolicy, Arn ]
